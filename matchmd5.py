import hashlibimport argparseimport reimport os, os.pathdef md5_file(fullpath):  """ Return the md5 sum for a file.  This can be used to compare two file to determine if they are identical.  """  m=hashlib.md5()  file=open(fullpath,'rb+')  tmp=file.read(32768)  while(tmp!=""):    m.update(tmp)    tmp=file.read(32768)  print "Examining file "+fullpath + "\t\t Hash: "+ m.hexdigest()  return m.hexdigest()directories=[os.getcwd()]parser = argparse.ArgumentParser(description='Check to see if files match a list of MD5 hashes')parser.add_argument('file', metavar='FILE', type=str, nargs='+',                   help='a file containing MD5 hashes')args = parser.parse_args()print args.filef = open(args.file[0])	keep = set()for line in f:  keep.update(re.findall(r'(?i)(?<![a-z0-9])[a-f0-9]{32}(?![a-z0-9])', line))  print "Will check against "	for i in keep:  print "MD5: ",iprint "in "+os.getcwd()+" "while len(directories)>0:  directory=directories.pop()  tmplist=os.listdir(directory)  tmplist.sort()  print "Traversing to directory "+ directory  for dir in tmplist:      fullpath=os.path.join(directory,dir)      if os.path.isfile(fullpath):	          if len(fullpath)<=4 or (len(fullpath) >4 and not fullpath[-4:]==".md5"):          md5 = md5_file(fullpath)          for i in keep:            if md5 == i:              print "MD5 FOUND: " + i + " at " + fullpath            #else:            #  print "MD5 Did not match " + fullpath      elif os.path.isdir(fullpath):            directories.append(fullpath)